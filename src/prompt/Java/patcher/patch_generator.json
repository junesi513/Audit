{
    "model_role_name": "Senior Software Engineer",
    "user_role_name": "Developer",
    "system_role": "You are a world-class security-conscious software engineer. Your task is to fix security vulnerabilities in code with surgical precision, ensuring correctness and maintaining original functionality. You ONLY output the modified code as requested.",
    "task": "Your mission is to rewrite the provided vulnerable Java function to fix the described security vulnerability. You will be given the full source code of the vulnerable function and a detailed explanation of the bug. Your entire response MUST be only the complete, corrected source code for the function. Do not include any other text, explanations, or markdown formatting like ```java ... ```. Just provide the raw function code.",
    "analysis_rules": [],
    "analysis_examples": [],
    "question_template": "### Vulnerable Function Code\n```java\n<FUNC_CODE>\n```\n\n### Vulnerability Report\n<BUG_REPORT>\n\n### Instruction\nRewrite the function above to fix the vulnerability described in the report. Provide only the full, corrected source code for the function.",
    "answer_format_cot": [
        {
          "example_thought": "The user wants me to fix a CWE-20 vulnerability in the 'deserialze' function. The root cause is a type precision loss when casting a generic 'Type' to a raw 'Class', which then bypasses validation checks. The patch for this is well-known: before using the type, check if it's a Class and, if so, handle it safely. Specifically, if the type is a raw Class, the component type should be handled carefully. The original vulnerable code does `componentType = componentClass = clazz.getComponentType();` inside the `else` block. The fix is to ensure that if `type` is already a `Class`, we don't proceed with unsafe operations. The standard fix for VUL4J-1 is to return `null` if `type` is a raw `Class` because the component type cannot be safely determined. I will rewrite the entire function incorporating this check at the beginning of the `else` block and output only the complete, corrected Java code for the method.",
          "example_output": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n        if (lexer.token() == JSONToken.NULL) {\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) bytes;\n        }\n\n        Class componentClass;\n        Type componentType;\n        if (type instanceof GenericArrayType) {\n            GenericArrayType clazz = (GenericArrayType) type;\n            componentType = clazz.getGenericComponentType();\n            if (componentType instanceof TypeVariable) {\n                TypeVariable typeVar = (TypeVariable) componentType;\n                Type objType = parser.getContext().type;\n                if (objType instanceof ParameterizedType) {\n                    ParameterizedType objParamType = (ParameterizedType) objType;\n                    Type objRawType = objParamType.getRawType();\n                    Type actualType = null;\n                    if (objRawType instanceof Class) {\n                        TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                        for (int i = 0; i < objTypeParams.length; ++i) {\n                            if (objTypeParams[i].getName().equals(typeVar.getName())) {\n                                actualType = objParamType.getActualTypeArguments()[i];\n                            }\n                        }\n                    }\n                    if (actualType instanceof Class) {\n                        componentClass = (Class) actualType;\n                    } else {\n                        componentClass = Object.class;\n                    }\n                } else {\n                    componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\n                }\n            } else {\n                componentClass = TypeUtils.getClass(componentType);\n            }\n        } else {\n            Class clazz = (Class) type;\n            if (clazz == Object.class) {\n                return (T) new Object[0];\n            }\n            componentType = componentClass = clazz.getComponentType();\n        }\n        JSONArray array = new JSONArray();\n        parser.parseArray(componentClass, array, fieldName);\n\n        return (T) toObjectArray(parser, componentClass, array);\n    }"
        }
    ],
    "meta_prompts": []
} 