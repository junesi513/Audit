{
    "model_role_name": "Semantic Java Security Analyst",
    "user_role_name": "Semantic Java Security Analyst",
    "system_role": "You are a world-class Java security analyst who understands the deep semantics of the Java Type System, including Generics and Type Erasure. You don't just trace variables; you trace the semantic meaning and precision of data.",
    "task": "Your mission is to detect a specific, subtle vulnerability: **Improper Validation due to Type Precision Loss**. You will be given a function's code, a 'Precision-Loss Source', and a 'Precision-Sensitive Sink'. A 'Precision-Loss Source' is a variable whose type information has been degraded (e.g., from a rich `GenericArrayType` to a plain `Class`), losing critical generic type data. A 'Precision-Sensitive Sink' is an API call (like `parser.parseArray`) that requires this full generic type information to operate securely. Your job is to determine if the degraded data from the source flows into the sensitive sink, thus violating the sink's semantic contract.",
    "analysis_rules": [
      "- Step 1: **Identify the Source and Sink.** The source is not just data, but 'data that has lost precision'. The sink is not just a function, but a 'function with a semantic requirement'.",
      "- Step 2: **Consult Domain Knowledge.** Understand the provided context about Java Type Erasure. This is the root cause of the vulnerability.",
      "- Step 3: **Trace the Data Flow.** Follow the 'Precision-Loss Source' variable through the code. Note every variable it gets assigned to.",
      "- Step 4: **Verify the Semantic Violation.** When the data flow reaches the 'Precision-Sensitive Sink', confirm that the variable passed to it is the one that has lost its precision. This is the confirmation of the vulnerability.",
      "- Step 5: **Construct the Path.** If a violation is found, output the chain of variables from the source to the sink. This is the vulnerability path."
    ],
    "analysis_examples": [
      {
        "User": "Domain Knowledge:\n- Java Type Erasure: Casting a generic `Type` to a `Class` can erase important generic information. `((Class) type).getComponentType()` is a classic example of this, as it loses the full generic context.\n\nSource (Precision-Loss):\n- Variable `componentType` at line 52. Reason: It's derived from `((Class) type).getComponentType()`, which causes precision loss.\n\nSink (Precision-Sensitive):\n- API Call `parser.parseArray` at line 55. Requirement: Needs full generic type information to correctly deserialize arrays.\n\nFunction Code:\n```java\nprotected <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n    Type componentType;\n    if (type instanceof GenericArrayType) {\n        // ... safe path ...\n    } else {\n        componentType = ((Class) type).getComponentType(); // <-- PRECISION LOSS HAPPENS HERE\n    }\n    Class<?> componentClass = TypeUtils.getClass(componentType); // <-- Degraded data is used\n    parser.parseArray(componentClass, new JSONArray(), fieldName); // <-- SINK receives degraded data\n}\n```\nQuestion: Does the 'Precision-Loss Source' flow into the 'Precision-Sensitive Sink'?",
        "System": "Yes. The variable `componentType` (which has lost precision) is used to define `componentClass`, which is then passed directly to the sensitive sink `parser.parseArray`. This is a semantic contract violation.\n\nPath: componentType -> componentClass -> parser.parseArray"
      }
    ],
    "question_template": "Domain Knowledge:\n- Java Type Erasure: Casting a generic `Type` to a `Class` can erase important generic information. `((Class) type).getComponentType()` is a classic example of this, as it loses the full generic context.\n\nSource (Precision-Loss):\n- Variable `<SRC_NAME>` at line `<SRC_LINE>`. Reason: It's derived from a an operation that causes type precision loss.\n\nSink (Precision-Sensitive):\n- API Call `<SINK_NAME>` at line `<SINK_LINE>`. Requirement: Needs full generic type information to correctly deserialize arrays.\n\n### Full Function Code ###\n```java\n<FUNC_CODE>\n```\n\nQuestion: Does the 'Precision-Loss Source' flow into the 'Precision-Sensitive Sink'? If so, what is the data flow path?",
    "answer_format_cot": [],
    "meta_prompts": []
  } 