import sys
from os import path
from pathlib import Path
import copy
import threading
import concurrent.futures
from typing import List, Tuple, Dict, Set
from tqdm import tqdm
import json
import time
import os
import networkx as nx

sys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__)))))

from agent.agent import *
from memory.semantic.dfbscan_state import *
from tstool.dfbscan_extractor.dfbscan_extractor import *
from tstool.dfbscan_extractor.Cpp.Cpp_MLK_extractor import *
from tstool.dfbscan_extractor.Cpp.Cpp_NPD_extractor import *
from tstool.dfbscan_extractor.Cpp.Cpp_UAF_extractor import *
from tstool.dfbscan_extractor.Java.Java_NPD_extractor import *
from tstool.dfbscan_extractor.Java.Java_CWE20_extractor import *
from tstool.dfbscan_extractor.Python.Python_NPD_extractor import *
from tstool.dfbscan_extractor.Go.Go_NPD_extractor import *

from llmtool.LLM_tool import *
from llmtool.dfbscan.step_tracer import StepTracer
from llmtool.dfbscan.path_validator import PathValidator
from ui.logger import Logger
from memory.report.bug_report import BugReport

BASE_PATH = Path(__file__).resolve().parents[2]

class DFBScanAgent(Agent):
    def __init__(
        self,
        language: str,
        project_path: str,
        bug_type: str,
        model_name: str,
        ts_analyzer: TSAnalyzer,
        is_reachable: bool = False,
        temperature: float = 0,
        call_depth: int = 5,
        max_neural_workers: int = 30,
        agent_id: int = 0,
    ) -> None:
        super().__init__()
        self.bug_type = bug_type
        self.is_reachable = is_reachable
        self.project_path = project_path
        self.project_name = project_path.split("/")[-1]
        self.language = language if language not in {"C", "Cpp"} else "Cpp"
        self.ts_analyzer = ts_analyzer
        self.model_name = model_name
        self.temperature = temperature
        self.call_depth = call_depth
        self.max_neural_workers = max_neural_workers
        self.MAX_QUERY_NUM = 5
        self.lock = threading.Lock()
        with self.lock:
            log_timestamp = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime())
            self.log_dir_path = f"{BASE_PATH}/log/dfbscan/{self.model_name}/{self.bug_type}/{self.language}/{self.project_name}/{log_timestamp}-{agent_id}"
            self.res_dir_path = f"{BASE_PATH}/result/dfbscan/{self.model_name}/{self.bug_type}/{self.language}/{self.project_name}/{log_timestamp}-{agent_id}"
            if not os.path.exists(self.log_dir_path):
                os.makedirs(self.log_dir_path)
            self.logger = Logger(self.log_dir_path + "/" + "dfbscan.log")
            if not os.path.exists(self.res_dir_path):
                os.makedirs(self.res_dir_path)

        self.step_tracer = StepTracer(self.model_name, self.temperature, self.language, self.MAX_QUERY_NUM, self.logger)
        self.path_validator = PathValidator(self.model_name, self.temperature, self.language, self.MAX_QUERY_NUM, self.logger)
        
        self.ts_analyzer.analyze_call_graph()
        extractor = self.__obtain_extractor()
        self.src_values, self.sink_values = extractor.extract_all()
        self.state = DFBScanState(self.src_values, self.sink_values)
        self.worklist = list(self.src_values)
        self.generated_report = []
        return

    def __obtain_extractor(self) -> DFBScanExtractor:
        if self.language == "Cpp":
            if self.bug_type == "MLK": return Cpp_MLK_Extractor(self.ts_analyzer)
            if self.bug_type == "NPD": return Cpp_NPD_Extractor(self.ts_analyzer)
            if self.bug_type == "UAF": return Cpp_UAF_Extractor(self.ts_analyzer)
        elif self.language == "Java":
            if self.bug_type == "NPD": return Java_NPD_Extractor(self.ts_analyzer)
            if self.bug_type == "CWE-20": return Java_CWE20_extractor(self.ts_analyzer)
        elif self.language == "Python":
            if self.bug_type == "NPD": return Python_NPD_Extractor(self.ts_analyzer)
        elif self.language == "Go":
            if self.bug_type == "NPD": return Go_NPD_Extractor(self.ts_analyzer)
        raise ValueError(f"Unsupported language/bug type combination: {self.language}/{self.bug_type}")

    def __process_src_value(self, src_value: Value) -> None:
        worklist = []
        call_context = CallContext()
        # ... (worklist initialization logic might differ slightly, but the core part is the call to intra_dfa)

        # Assuming `start_function` is the function containing the `src_value`
        start_function = self.ts_analyzer.get_function_from_localvalue(src_value)
        if not start_function:
            return

        # --- Start of Modification for Improvement #2 ---
        # Extract structural hints for the LLM
        local_vars = self.ts_analyzer.get_local_variable_declarations(start_function)
        assignments = self.ts_analyzer.get_assignment_expressions(start_function)

        # Construct the input for intra-procedural data-flow analysis
        # This part might need adjustment based on how sinks, calls, etc., are gathered
        sinks_in_function = self.__obtain_extractor().extract_sinks(start_function)
        sink_values = [
            (sink.name, sink.start_line) for sink in sinks_in_function
        ]
        call_statements = [
            # Logic to get call statements might need to be implemented/verified
        ]
        ret_values = [
            # Logic to get return values might need to be implemented/verified
        ]
        
        input_data = IntraDataFlowAnalyzerInput(
            function=start_function,
            src_value=src_value,
            sink_values=sink_values,
            call_statements=call_statements,
            ret_values=ret_values,
            local_vars=local_vars,
            assignments=assignments,
        )
        
        # Invoke the intra-procedural data-flow analysis
        output = self.intra_dfa.invoke(input_data)
        # --- End of Modification for Improvement #2 ---

        if output is None:
            return
        
        # ... (process the output and generate reports)
        
    def start_scan(self) -> None:
        self.logger.print_console("Start data-flow bug scanning in parallel...")
        self.logger.print_console(f"Max number of workers: {self.max_neural_workers}")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_neural_workers) as executor:
            pbar = tqdm(total=len(self.worklist), desc="Processing Source Values", leave=False)
            futures = {executor.submit(self.__process_src_value, src_value) for src_value in self.worklist}
            for future in concurrent.futures.as_completed(futures):
                pbar.update(1)
            pbar.close()

        self.logger.print_console(f"{len(self.generated_report)} bug(s) was/were detected in total.")
        self.dump_reports()
        self.logger.print_console(f"The bug report(s) has/have been dumped to {self.res_dir_path}/detect_info.json")
        self.logger.print_console("The log files are as follows:")
        self.logger.print_console(f"{self.log_dir_path}/dfbscan.log")
        return

    def dump_reports(self):
        bug_report_dict = {i: report.to_dict() for i, report in enumerate(self.generated_report)}
        with open(f"{self.res_dir_path}/detect_info.json", "w") as bug_info_file:
            json.dump(bug_report_dict, bug_info_file, indent=4)
            
    def get_agent_state(self) -> DFBScanState:
        return self.state

    def get_log_files(self) -> List[str]:
        return [f"{self.log_dir_path}/dfbscan.log"]
